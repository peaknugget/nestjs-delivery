services:
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
      target: production
    env_file:
      - ./apps/gateway/.env
    ports:
      - "3000:3000"
    depends_on:
      - user
      - product
      - order
      - payment
      - notification

  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      target: production
    env_file:
      - ./apps/user/.env
    depends_on:
      postgres_user:
        condition: service_healthy

  postgres_user:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "6001:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  product:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
      target: production
    env_file:
      - ./apps/product/.env
    depends_on:
      postgres_product:
        condition: service_healthy

  postgres_product:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "6002:5432"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  order:
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      target: production
    env_file:
      - ./apps/order/.env
    depends_on:
      mongo_order:
        condition: service_healthy

  mongo_order:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: strong_password
    ports:
      - "6003:27017"
    volumes:
      - mongo_order_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  payment:
    build:
      context: .
      dockerfile: ./apps/payment/Dockerfile
      target: production
    env_file:
      - ./apps/payment/.env
    depends_on:
      postgres_payment:
        condition: service_healthy

  postgres_payment:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "6005:5432"
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: production
    env_file:
      - ./apps/notification/.env
    depends_on:
      mongo_notification:
        condition: service_healthy

  mongo_notification:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: strong_password
    ports:
      - "6006:27017"
    volumes:
      - mongo_notification_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  postgres_user_data:
  postgres_product_data:
  postgres_payment_data:
  mongo_order_data:
  mongo_notification_data:
