// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: payment.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export interface MakePaymentRequest {
  orderId: string;
  paymentMethod: string;
  paymentName: string;
  cardNumber: string;
  expiryYear: string;
  expiryMonth: string;
  birthOrRegistration: string;
  amount: number;
  userEmail: string;
  passwordTwoDigits: string;
}

export interface MakePaymentResponse {
  id: string;
  paymentStatus: string;
  paymentMethod: string;
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  makePayment(request: MakePaymentRequest, metadata?: Metadata): Observable<MakePaymentResponse>;
}

export interface PaymentServiceController {
  makePayment(
    request: MakePaymentRequest,
    metadata?: Metadata,
  ): Promise<MakePaymentResponse> | Observable<MakePaymentResponse> | MakePaymentResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["makePayment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
